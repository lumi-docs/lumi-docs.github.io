(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{169:function(t,a,e){"use strict";e.r(a);var i=e(0),s=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"m-series-json-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#m-series-json-data","aria-hidden":"true"}},[t._v("#")]),t._v(" M series JSON data")]),t._v(" "),e("p",[e("em",[t._v("Last updated: Mar 21, 2019")]),e("br"),t._v(" "),e("em",[t._v("Read time: 3 mins")])]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("Here you will find the lastest information about the migrated M series data and instructions to access it.")]),t._v(" "),e("h2",{attrs:{id:"instructions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instructions","aria-hidden":"true"}},[t._v("#")]),t._v(" Instructions")]),t._v(" "),e("p",[t._v("The M-Series migrated data is divided into two partitions: "),e("strong",[t._v("old data")]),t._v(" (prior to 2017) and "),e("strong",[t._v("new data")]),t._v(". There are 3 folders within each partition(folder): "),e("strong",[t._v("jsons")]),t._v(", "),e("strong",[t._v("processed_data")]),t._v(" and "),e("strong",[t._v("raw_data")]),t._v(". Please refer to the "),e("a",{attrs:{href:"#folder-structure"}},[t._v("Folder structure")]),t._v(" section below. The JSON files present in the "),e("strong",[t._v("jsons")]),t._v(" folder should be the starting point for any exploration. Each JSON file corresponds to an M-series image and contains all the metadata regarding that image including the links to the actual binary data. A python script named "),e("em",[t._v("read_data.py")]),t._v(" is present in the main folder. Please import this file in you python script and use the functions provided in it to conduct basic tasks such as viewing a JSON file, reading a JSON file into a python dictionary, loading the binary data into numpy arrays and accessing any other field in the JSON file. Please read more about these functions in the "),e("a",{attrs:{href:"#reading-data"}},[t._v("Reading Data")]),t._v(" section below.")]),t._v(" "),e("p",[t._v("Latest version of all data can be found at "),e("span",{staticStyle:{color:"blue"}},[t._v("W:\\M_Series_migration")])]),t._v(" "),e("h2",{attrs:{id:"folder-structure"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#folder-structure","aria-hidden":"true"}},[t._v("#")]),t._v(" Folder structure")]),t._v(" "),e("ul",[e("li",[t._v("M_Series_migration/\n"),e("ul",[e("li",[t._v("old_data/\n"),e("ul",[e("li",[t._v("jsons/\n"),e("ul",[e("li",[t._v("all json files")])])]),t._v(" "),e("li",[t._v("processed_data/\n"),e("ul",[e("li",[t._v("all planes and mask files")])])]),t._v(" "),e("li",[t._v("raw_data/\n"),e("ul",[e("li",[t._v("all pd images")]),t._v(" "),e("li",[t._v("all raw images")])])])])]),t._v(" "),e("li",[t._v("new_data/ (raw image available only when it existed in original file)")]),t._v(" "),e("li",[t._v("glue_spoof_combined/")]),t._v(" "),e("li",[t._v("new_dragonskin_spoofs/")]),t._v(" "),e("li",[t._v("new_ecoflex_flesh_spoofs/")]),t._v(" "),e("li",[t._v("transparency_train/")]),t._v(" "),e("li",[t._v("validation_set_1/ (external study data- 12/18; various transpirancy spoofs)")]),t._v(" "),e("li",[t._v("validation_set_2/ (boundary conditions)")]),t._v(" "),e("li",[t._v("wood_glue_Spoofs_3_4_19/")]),t._v(" "),e("li",[t._v("read_data.py")])])])]),t._v(" "),e("h2",{attrs:{id:"reading-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reading-data","aria-hidden":"true"}},[t._v("#")]),t._v(" Reading Data")]),t._v(" "),e("p",[t._v("The python script, "),e("em",[t._v("read_data.py")]),t._v(" contains some functions/methods to perform basic tasks. These are as follows:")]),t._v(" "),e("h3",{attrs:{id:"view-json-json-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#view-json-json-path","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("view_json(json_path):")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Description:")]),e("br"),t._v("\nPretty print a JSON file.")]),t._v(" "),e("li",[e("strong",[t._v("Input:")]),e("br"),t._v(" "),e("code",[t._v("json_path")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | Full path to the JSON file")]),t._v(" "),e("li",[e("strong",[t._v("Returns:")]),e("br"),t._v("\nNothing (prints JSON on console)")])]),t._v(" "),e("h3",{attrs:{id:"read-json-json-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#read-json-json-path","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("read_json(json_path):")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Description:")]),e("br"),t._v("\nLoad a JSON file into a python dictionary.")]),t._v(" "),e("li",[e("strong",[t._v("Input:")]),e("br"),t._v(" "),e("code",[t._v("json_path")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | Full path to the JSON file")]),t._v(" "),e("li",[e("strong",[t._v("Returns:")]),e("br"),t._v("\nA python dictionary")])]),t._v(" "),e("h3",{attrs:{id:"get-data-json-path-which-data"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-data-json-path-which-data","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("get_data(json_path, which_data):")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Description:")]),e("br"),t._v("\nLoad raw image, PD image or processed image (planes and mask array).")]),t._v(" "),e("li",[e("strong",[t._v("Inputs:")]),e("br"),t._v(" "),e("code",[t._v("json_path")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | Full path to the JSON file"),e("br"),t._v(" "),e("code",[t._v("which_data")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | "),e("em",[t._v("'raw'")]),t._v(" for raw image, "),e("em",[t._v("'pd'")]),t._v(" for PD image and "),e("em",[t._v("'proc'")]),t._v(" for processed data(planes and mask)")]),t._v(" "),e("li",[e("strong",[t._v("Returns:")]),e("br"),t._v("\nA numpy nd array")])]),t._v(" "),e("h3",{attrs:{id:"get-field-json-path-field"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-field-json-path-field","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("code",[t._v("get_field(json_path, field):")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Description:")]),e("br"),t._v("\nLoad any field from the json. "),e("em",[t._v("Note: This is a recursive function")]),t._v(".")]),t._v(" "),e("li",[e("strong",[t._v("Inputs:")]),e("br"),t._v(" "),e("code",[t._v("json_path")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | Full path to the JSON file"),e("br"),t._v(" "),e("code",[t._v("field")]),t._v(" | "),e("span",{staticStyle:{color:"blue"}},[t._v("string")]),t._v(" | The key you want to search. Ex. "),e("em",[t._v("'calibration_data'")]),t._v(", "),e("em",[t._v("'sensor_config'")]),t._v(", "),e("em",[t._v("'finger_id'")]),t._v(", etc.")]),t._v(" "),e("li",[e("strong",[t._v("Returns:")]),e("br"),t._v("\nA variable of any of the following types : "),e("span",{staticStyle:{color:"blue"}},[t._v("string, int, float, dict, list")])])])])}],!1,null,null,null);a.default=s.exports}}]);