(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{172:function(e,t,a){"use strict";a.r(t);var n=a(0),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),a("p",[e._v("In this tutorial, we will train a model on the ML engine.")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),a("p",[e._v("ML engine provides many pre-built hardware configurations to choose from. For example, a "),a("strong",[e._v("STANDARD_1")]),e._v(" tier configuration has eight VMs of different types working together in a cluster, and a "),a("strong",[e._v("BASIC_GPU")]),e._v(" tier has only one VM with a NVIDIA Tesla K80 GPU, working alone. We can also choose the "),a("strong",[e._v("CUSTOM")]),e._v(" tier and create our own configuration. Here is a "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/machine-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("comprehensive list"),a("OutboundLink")],1),e._v(" of all the tiers and their descriptions.")]),e._v(" "),e._m(4),e._v(" "),a("p",[e._v("We will need the "),a("strong",[e._v("gcloud")]),e._v(" and "),a("strong",[e._v("gsutil")]),e._v(" command line tools. Please install the "),a("a",{attrs:{href:"https://cloud.google.com/sdk/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Cloud SDK"),a("OutboundLink")],1),e._v(" to acquire them. Once installed, open up a terminal window and run "),a("code",[e._v("gcloud init")]),e._v(". Log in to your Google cloud account and choose the project you created in the previous tutorial, when prompted.")]),e._v(" "),e._m(5),e._v(" "),a("p",[e._v("A traditional model training code requires some modifications to make it compatible with ML engine. Let's go through them step-by-step.")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),a("ol",[e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),a("li",[a("p",[e._v("Let's go through the config.yaml file.")]),e._v(" "),a("ul",[e._m(14),e._v(" "),a("li",[a("strong",[e._v("scaleTier")]),e._v(": This parameter is for defining the type of architecture. We chose a custom architecture, meaning that we will create our own architecture rather than using a pre-built one. Here is a "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/machine-types",target:"_blank",rel:"noopener noreferrer"}},[e._v("comprehensive list"),a("OutboundLink")],1),e._v(" of all the tiers and their descriptions.")]),e._v(" "),a("li",[a("strong",[e._v("masterType")]),e._v(": As we chose the custom tier, we will need to provide more information about the architecture. In a distributed ML architecture, a job is run on a cluster of VMs. These VMs are called nodes. A "),a("strong",[e._v("master node")]),e._v(" or "),a("strong",[e._v("chief worker node")]),e._v(" assigns operations to worker nodes, coordinates these operations and works as a worker node as well. "),a("strong",[e._v("Worker nodes")]),e._v(" calculate gradient vectors from the training dataset. Another kind of node called "),a("strong",[e._v("parameter server node")]),e._v(", updates parameters with the gradient vectors from the worker nodes. For this example, we will create an architecture with only one node (non- distributed architecture). We selected a node called "),a("strong",[e._v("standard_gpu")]),e._v(" as our master node and we will not have any worker or parameter server nodes. Here is a link to learn more about "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/distributed-tensorflow-mnist-cloud-datalab",target:"_blank",rel:"noopener noreferrer"}},[e._v("distributed training on ML engine"),a("OutboundLink")],1),e._v(".")]),e._v(" "),e._m(15),e._v(" "),a("li",[a("strong",[e._v("pythonVersion")]),e._v(": We are using python 3.5. Please check the python version and tensorflow version on your local machine and find the ML engine version that supports both. Here is the "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/runtime-version-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("list of runtime versions"),a("OutboundLink")],1),e._v(" for ML engine.")])])]),e._v(" "),a("li",[a("p",[e._v("Create a file called "),a("strong",[e._v("setup.py")]),e._v(" in the "),a("strong",[e._v("ml_engine_example/")]),e._v(" directory (not in the "),a("strong",[e._v("ml_engine_example/trainer/")]),e._v(" directory like the other files). This file is used by ML engine to install dependency packages. Go to the "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/runtime-version-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("list of runtime versions"),a("OutboundLink")],1),e._v(" to check which packages come with the ML engine version you are using. Any packages not included in this list, must be installed through "),a("strong",[e._v("setup.py")]),e._v(". Copy this code into your "),a("strong",[e._v("setup.py")]),e._v(" file:")]),e._v(" "),e._m(16),a("p",[e._v("Any extra packages not included in your ML engine version, can be install through the "),a("strong",[e._v("install_requires")]),e._v(" field. A list of all the dependencies can be passed through this variable. You may write some code to create a list of dependencies prior to the "),a("strong",[e._v("setup()")]),e._v(" function call, or populate the list manually, as in the example above. You can also install custom made packages and packages not available through pip installs. Please read more about "),a("a",{attrs:{href:"https://cloud.google.com/ml-engine/docs/tensorflow/packaging-trainer",target:"_blank",rel:"noopener noreferrer"}},[e._v("packaging"),a("OutboundLink")],1),e._v(" if you want to include custom or non-pip packages.")])]),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19)]),e._v(" "),e._m(20),e._v(" "),a("p",[e._v("Now that your ML engine job is ready, let's move it to the cloud.")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Open your cloud "),a("a",{attrs:{href:"https://console.cloud.google.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("console"),a("OutboundLink")],1),e._v(", click on this button "),a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/navigation_menu_button.png",alt:"alt text",title:"Navigation menu button"}}),e._v(" to open the navigation menu and then click on "),a("strong",[e._v("Storage")]),e._v(" to open cloud storage."),a("br"),e._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/storage_button.jpg",alt:"alt text",title:"Storage button"}})])]),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25)]),e._v(" "),e._m(26),e._v(" "),e._m(27),e._v(" "),e._m(28),e._v(" "),e._m(29),e._v(" "),e._m(30),e._v(" "),e._m(31),e._v(" "),e._m(32),e._v(" "),a("p",[e._v("In this tutorial, we learnt more about ML engine. We saw how to convert a model into a ML job and train it on ML engine. We also learned how to upload data into buckets and had an introduction to cloud shell. In the next tutorial we will see, how to draw predictions from our trained model.")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"training-on-ml-engine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#training-on-ml-engine","aria-hidden":"true"}},[this._v("#")]),this._v(" Training on ML engine")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"ml-engine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ml-engine","aria-hidden":"true"}},[this._v("#")]),this._v(" ML engine")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("The ML engine is a managed service in GCP used to train and deploy ML models. A "),t("strong",[this._v("managed service")]),this._v(" is a common cloud term. A traditional cloud service requires users to (1) define a job and (2) implement their own solution. On the other hand, a managed service requires users to (1) define the job and (2) define the solution too. The managed service finds the best way to implement your solution. Let's compare the steps required to train a ML model on a traditional cloud service, vs. a managed cloud service.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[a("p",[e._v("Traditional cloud service:")]),e._v(" "),a("ol",[a("li",[e._v("User creates a VM in the cloud with the desired hardware configuration.")]),e._v(" "),a("li",[e._v("User installs all dependencies and ensures compatibility among the package versions.")]),e._v(" "),a("li",[e._v("User trains the model on the VM.")])])]),e._v(" "),a("li",[a("p",[e._v("Managed cloud service:")]),e._v(" "),a("ol",[a("li",[e._v("User provides the model to ML engine.")]),e._v(" "),a("li",[e._v("User provides a configuration file describing the desired hardware infrastructure. The configuration can be a complex cluster with multiple nodes, or a simple single VM.")]),e._v(" "),a("li",[e._v("ML engine creates a cohesive optimal environment using the configuration file, installs dependencies, ensure compatibility, and trains the model.")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"install-google-cloud-sdk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-google-cloud-sdk","aria-hidden":"true"}},[this._v("#")]),this._v(" Install Google Cloud SDK")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"make-code-compatible-with-ml-engine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#make-code-compatible-with-ml-engine","aria-hidden":"true"}},[this._v("#")]),this._v(" Make code compatible with ML engine")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ol",[a("li",[e._v("Make a python file named "),a("strong",[e._v("train.py")]),e._v(" and put all your code in it. If your code is divided among multiple python files, please make sure that "),a("strong",[e._v("train.py")]),e._v(" is the main python file that references code in the other files. This is necessary because ML engine looks for a "),a("strong",[e._v("train.py")]),e._v(" file in your project folder and runs it.")]),e._v(" "),a("li",[e._v("Modify your code so that you can pass command line arguments. We will need to pass two arguments: (1) the location of the input data, and (2) the location where summary and checkpoints will be stored. We will pass local machine paths when testing our code locally, but pass cloud storage bucket paths when running our code on the cloud. Here is a sample train.py file format:"),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Import the argparse module")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" argparse\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Training function")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("def")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("train_model")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("job_dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" train_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[e._v("'''\n    Put your training code here\n    ..\n    ..\n\n    '''")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Traning Data Location: "')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" train_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Model Saving Location: "')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" job_dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" __name__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'__main__'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create an argument parser instance")]),e._v("\n    parser "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" argparse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("ArgumentParser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Add the arguments placeholders")]),e._v("\n    parser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add_argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--job-dir"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("help")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cloud or local location where summary, checkpoints and model will be saved"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      required"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    parser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("add_argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--train-data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("help")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cloud or local location of the input data"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n      required"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Read the arguments")]),e._v("\n    args "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" parser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("parse_args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Put them in variables")]),e._v("\n    job_dir "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("job_dir\n    train_data "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("train_data\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pass them to training function")]),e._v("\n    train_model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("job_dir"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" train_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])]),e._v(" "),a("li",[e._v("Replace file operations with Tensorflow's python file operations. This step is needed because python's file operations do not work with files stored in Google cloud storage buckets. Here is a sample code to do this:"),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Import the the file_io package ")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" tensorflow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("python"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("lib"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("io "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" file_io\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# A sample empty text file")]),e._v("\nsample_file "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sample.txt"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Open a file handle to write")]),e._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" file_io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("FileIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sample_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'w'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("write"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Open a file handle to read")]),e._v("\nf "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" file_io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("FileIO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("sample_file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'r'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("readlines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#PLEASE NOTE: DON\'T DO "f.close()"')]),e._v("\n")])])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"create-a-ml-engine-job"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#create-a-ml-engine-job","aria-hidden":"true"}},[this._v("#")]),this._v(" Create a ML engine job")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Now that our code is compatible with ML engine, we need to create a "),t("strong",[this._v("ML engine job")]),this._v(". Creating a job is basically creating some files and putting them inside a folder. Here are the steps:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("Create a folder and give it a name like "),t("strong",[this._v("facial_recognition_job_1_0")]),this._v(" or "),t("strong",[this._v("landmark_detection_job_2_1")]),this._v(". For this tutorial, let's say we name it "),t("strong",[this._v("ml_engine_example")]),this._v(".")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Inside "),a("strong",[e._v("ml_engine_example/")]),e._v(", create a folder called "),a("strong",[e._v("trainer/")]),e._v(". Move you "),a("strong",[e._v("train.py")]),e._v(" file and other .py files (if any) inside the "),a("strong",[e._v("trainer/")]),e._v(" folder.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("In the same directory ("),t("strong",[this._v("ml_engine_example/trainer/")]),this._v("), create a file named "),t("strong",[this._v("__init__.py")]),this._v(". Leave this file empty.")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Now, using a terminal, "),a("code",[e._v("cd")]),e._v(" into "),a("strong",[e._v("ml_engine_example/")]),e._v(" and run your code using the following command to verify that it works after making the modifications.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("python -m trainer.train --train-data"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("location of your train data"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --job-dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("location where you want to save the model"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Create another file in the same directory named "),a("strong",[e._v("config.yaml")]),e._v(". Copy the following code into this file.")]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("trainingInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("scaleTier")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" CUSTOM\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("masterType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" standard_gpu\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("runtimeVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.8"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("pythonVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"3.5"')]),e._v("\n")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("strong",[this._v("trainingInput")]),this._v(": As the name suggests, all the parameters that ML engine needs to start a training job, comes under this parameter.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("strong",[this._v("runtimeVersion")]),this._v(": This is the ML engine version. Each ML engine version comes with a unique set of packages and package versions. For example, ML engine version 1.0 includes Tensorflow 1.0.1 and a list of  packages essential for data science, such as numpy, scipy, and pandas to name a few. In our case, we will use version 1.8.")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" setuptools "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" find_packages\n\nREQUIRED_PACKAGES "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'some_PyPI_package>=1.0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n\nsetup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'trainer'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    version"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    install_requires"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("REQUIRED_PACKAGES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    packages"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("find_packages"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    include_package_data"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    description"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'My training application package.'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("We have to create one last file. Create a file named "),a("strong",[e._v("cloud_shell_command.sh")]),e._v(" in the "),a("strong",[e._v("ml_engine_example/")]),e._v(" directory and paste the following code:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" JOB_DIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gs://"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your bucket name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/code/ml_engine_example/model\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" DATA_DIR"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("gs://"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your bucket name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/data/ml_engine_example\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" JOB_NAME"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ml_engine_example_'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("date")]),e._v(" +%Y%m%d_%H%M%S"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v('"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("export")]),e._v(" REGION"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("us-central1\n\ngcloud ml-engine "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("jobs")]),e._v(" submit training "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$JOB_NAME")]),e._v(" \\\n  --job-dir "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$JOB_DIR")]),e._v(" \\\n  --module-name trainer.train \\\n  --package-path ./trainer \\\n  --region "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$REGION")]),e._v(" \\\n  --config trainer/config.yaml \\\n  -- \\\n  --train-data "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$DATA_DIR")]),e._v("/\n")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("This file contains a shell command used to submit our job to ML engine. Let's look at these values:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("JOB_DIR")]),e._v(" and "),a("strong",[e._v("DATA_DIR")]),e._v(": These are the cloud locations where your model will be stored and where your data is stored. We will update the "),a("strong",[e._v("bucket name")]),e._v(" once we create a bucket under the "),a("a",{attrs:{href:"#uploading-data-and-code-to-the-cloud"}},[e._v("Uploading data and code to the cloud")]),e._v(" section.")]),e._v(" "),a("li",[a("strong",[e._v("JOB_NAME")]),e._v(": This is the name of the job followed by the current data and time. ML engine stores logs every time we train. Adding the date and time helps distinguish between these logs.")]),e._v(" "),a("li",[a("strong",[e._v("REGION")]),e._v(": This parameter defines the physical location of the cloud resources that will be procured to run your ML engine job. "),a("strong",[e._v("us-central1")]),e._v(" is the closest location to Albuquerque, so all our resources will be created in this region for good performance and cost efficiency.")]),e._v(" "),a("li",[a("strong",[e._v("module-name")]),e._v(": This is the directory of your "),a("strong",[e._v("train.py")]),e._v(" file. Inside the job folder ("),a("strong",[e._v("ml_engine_example/")]),e._v("), the "),a("strong",[e._v("train.py")]),e._v(" file is located at "),a("strong",[e._v("trainer/train.py")]),e._v(". Hence the value "),a("strong",[e._v("trainer.train")]),e._v(" is used for this parameter.")]),e._v(" "),a("li",[a("strong",[e._v("package-path")]),e._v(": This is the path to the "),a("strong",[e._v("trainer")]),e._v(" folder. ML engine treats the "),a("strong",[e._v("trainer")]),e._v(" folder as a package. This is the reason we added a "),a("strong",[e._v("__init__.py")]),e._v(" in this folder.")])]),e._v(" "),a("p",[e._v("After these steps, your ML job folder should look like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("├── ml_engine_example/ \n    ├── trainer/\n    │   ├── __init__.py\n    │   ├── train.py\n    │   └── config.yaml\n    ├── cloud_shell_command.sh\n    └── setup.py\n")])])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Now check if your ML engine job was made correctly by running it locally using the gcloud command. In a terminal window, "),a("code",[e._v("cd")]),e._v(" into the "),a("strong",[e._v("ml_engine_example/")]),e._v(" folder and run this code:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ gcloud ml-engine local train --module-name trainer.train --package-path ./trainer -- --train-data"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("location of your train data"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --job-dir"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("location where you want to save the model"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v('The first set of arguments are for the ML engine and second set of arguments are for your python code. Note that the two types of arguments are separated by an extra "--". Also, note that in the local version of the gcloud command, the parameter '),a("strong",[e._v("--job-dir")]),e._v(" belongs to the second set of arguments and in the cloud version of the same command (in "),a("strong",[e._v("cloud_shell_command.sh")]),e._v(" file), it belongs to the first set of arguments.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"uploading-data-and-code-to-the-cloud"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uploading-data-and-code-to-the-cloud","aria-hidden":"true"}},[this._v("#")]),this._v(" Uploading data and code to the cloud")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Click on "),a("strong",[e._v("CREATE BUCKET")]),e._v(" "),a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/create_bucket_button.png",alt:"alt text",title:"Create bucket button"}}),e._v(" , choose a name for your bucket, select "),a("strong",[e._v("Regional")]),e._v(" and click "),a("strong",[e._v("Create")]),e._v(".")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Once the bucket is created, the console displays the contents of your bucket (a message "),a("em",[e._v('"There are no live objects in this bucket...."')]),e._v(" is displayed as your bucket is empty). You will see a few buttons such as "),a("strong",[e._v("Upload files")]),e._v(", "),a("strong",[e._v("Upload folder")]),e._v(" and "),a("strong",[e._v("Create folder")]),e._v(". Create two folders named "),a("strong",[e._v("code")]),e._v(" and "),a("strong",[e._v("data")]),e._v(" using the "),a("strong",[e._v("Create folder")]),e._v(" button. Now your bucket should look like this:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/bucket.jpg",alt:"alt text",title:"Bucket"}})])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Enter the "),a("strong",[e._v("data/")]),e._v(" folder by clicking on it and use the "),a("strong",[e._v("Create folder")]),e._v(" button to create another folder named "),a("strong",[e._v("ml_engine_example/")]),e._v(" inside "),a("strong",[e._v("data/")]),e._v(" folder.")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Now enter "),a("strong",[e._v("ml_engine_example/")]),e._v(" folder and click on "),a("strong",[e._v("Upload files")]),e._v(" or "),a("strong",[e._v("Upload folder")]),e._v(" button to upload your training data into "),a("strong",[e._v("ml_engine_example/")]),e._v(" folder.")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("Next, upload your ML job (the "),a("strong",[e._v("ml_engine_example/")]),e._v(" folder on your local machine that contains all your code) to the "),a("strong",[e._v("code/")]),e._v(" folder in your bucket. Do not forget to update your "),a("strong",[e._v("bucket name")]),e._v(" in "),a("strong",[e._v("cloud_shell_command.sh")]),e._v(" (in "),a("strong",[e._v("JOB_DIR")]),e._v(" and "),a("strong",[e._v("DATA_DIR")]),e._v(" variables) file, before uploading. Now your bucket folder structure should look like this:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("├── your_bucket/\n    ├── data/\n    │   └── ml_engine_example/ \n    │       └── training data\n    └── code/\n        ├── ml_engine_example/ \n            ├── trainer/\n            │   ├── __init__.py\n            │   ├── train.py\n            │   └── config.yaml\n            ├── cloud_shell_command.sh\n            └── setup.py\n")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"cloud-shell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cloud-shell","aria-hidden":"true"}},[this._v("#")]),this._v(" Cloud shell")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("Although we can access many of the cloud resources from the console UI, some operations can only be performed through the "),t("strong",[this._v("cloud shell")]),this._v(". Cloud shell is the terminal window of a small linux virtual machine that is connected to all your cloud resources. This means you can access and manipulate all your cloud resources such as your buckets, databases, compute engine instances and ML jobs through cloud shell.")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("To open your cloud shell, click on this "),t("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/shell_button.png",alt:"alt text",title:"Shell button"}}),this._v(" button present at the top right corner of you GCP console. It takes a few minutes for google cloud to create the virtual machine before you can use the shell. When the shell is ready, your console should look like this:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/cloud_shell.jpg",alt:"alt text",title:"Cloud shell"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"run-your-ml-job"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#run-your-ml-job","aria-hidden":"true"}},[this._v("#")]),this._v(" Run your ML job")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ol",[a("li",[a("p",[e._v("Let's start by copying the job onto the disk of the cloud shell machine. Run the code below on the cloud shell window (the black partial window touching the bottom edge of the screen).")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ gsutil "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" -r gs://"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("your bucket name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("/code/ml_engine_example ~\n")])])]),a("p",[e._v("Then "),a("code",[e._v("cd")]),e._v(" into the job folder you just copied.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cd")]),e._v(" ml_engine_example/\n")])])]),a("p",[e._v("Give permission to run "),a("strong",[e._v("cloud_shell_command.sh")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x gcloud_command.sh\n")])])]),a("p",[e._v("Run "),a("strong",[e._v("cloud_shell_command.sh")]),e._v(" to submit your ML engine job.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ ./gcloud_command.sh\n")])])]),a("p",[e._v("On the cloud shell you might get a message asking permission to activate some APIs. Please allow the activation of these APIs. If you get a message on the cloud shell that your job was queued, your job is now running on the ML engine.")])]),e._v(" "),a("li",[a("p",[e._v("Open the navigation menu and click on "),a("strong",[e._v("ML engine")]),e._v(" tab to open the ML engine console. You will see a list of all the ML engine jobs you have run so far. If this is your first time running a job, you will only see one entry.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/ml_engine_button.jpg",alt:"alt text",title:"ML engine button"}})])]),e._v(" "),a("li",[a("p",[e._v("Click on the "),a("strong",[e._v("Job ID")]),e._v(" to monitor your running job. You can track the activity of all the nodes used in your architecture.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/ml_job_id.jpg",alt:"alt text",title:"ML job ID"}})])]),e._v(" "),a("li",[a("p",[e._v("Click on "),a("strong",[e._v("View Logs")]),e._v(" to see the steps being taken by ML engine. Once the training starts, your code output will be displayed here as well.")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/logs_button.jpg",alt:"alt text",title:"Logs button"}})])]),e._v(" "),a("li",[a("p",[e._v("If your code is generating tensorflow logs, you can visualize them using tensorboard. On the cloud shell, run this code:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" tensorboard log dir: "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${JOB_DIR}")]),e._v("\n$ tensorboard --logdir"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${JOB_DIR}")]),e._v("/logs --port 8000 --reload_interval"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("5\n")])])]),a("p",[e._v("If running the "),a("code",[e._v("echo")]),e._v(" command shows that the "),a("strong",[e._v("JOB_DIR")]),e._v(" environment variable is empty, replace "),a("code",[e._v("${JOB_DIR}")]),e._v(" by "),a("code",[e._v("gs://<your bucket name>/code/ml_engine_example/model")]),e._v(" in your "),a("code",[e._v("tensorboard")]),e._v(" command.")])]),e._v(" "),a("li",[a("p",[e._v("Once the tensorboard is ready for access, click on the "),a("strong",[e._v("Web preview")]),e._v(" button "),a("img",{attrs:{src:"https://raw.githubusercontent.com/lumi-docs/data/master/google_cloud_platform/web_preview_button.png",alt:"alt text",title:"Web preview button"}}),e._v(" located at the right corner of the cloud shell window (the black partial window touching the bottom edge of the screen), and click on "),a("strong",[e._v("Change port")]),e._v(". In the popup, enter port number 8000 because tensorflow was run on this port, and click "),a("strong",[e._v("CHANGE AND PREVIEW")]),e._v(".")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#summary","aria-hidden":"true"}},[this._v("#")]),this._v(" Summary")])}],!1,null,null,null);t.default=s.exports}}]);